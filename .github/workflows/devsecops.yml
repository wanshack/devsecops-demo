name: DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  devsecops:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Static Analysis - CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # SCA - Dependency Check
      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DevSecOpsDemo'
          scan: '.'
          format: 'HTML'

      # Build Docker Image
      - name: Build Docker image
        run: docker build -t devsecops-demo .

      # Scan Docker image - Trivy
      - name: Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'devsecops-demo'

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag and push Docker image
        run: |
          docker tag devsecops-demo ${{ secrets.DOCKER_USERNAME }}/devsecops-demo:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/devsecops-demo:latest

      - name: Send Telegram Notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MESSAGE="üöÄ DevSecOps Pipeline selesai dengan status: *$STATUS*\n\nüì¶ Repository: ${{ github.repository }}\nüîÅ Commit: ${{ github.sha }}\nüîó Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MESSAGE" \
            -d parse_mode=Markdown
